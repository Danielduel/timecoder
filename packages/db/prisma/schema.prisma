// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model SubEventV0 {
    id                String            @id @default(cuid())

    data      Json
    name      String

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    ownerId           String
    owner             User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    createdById       String
    createdBy         IntegrationV0     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    parentId          String
    parent            EventV0           @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model EventV0 {
    id                String            @id @default(cuid())

    data              Json
    name              String

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    ownerId           String
    owner             User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    createdById       String
    createdBy         IntegrationV0     @relation(fields: [createdById], references: [id], onDelete: Cascade)

    parentId          String
    parent            SessionV0         @relation(fields: [parentId], references: [id], onDelete: Cascade)

    children          SubEventV0[]
}

model SessionV0 {
    id                String            @id @default(cuid())

    title             String            @default("")
    description       String            @default("")
    published         Boolean           @default(false)

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    ownerId           String
    owner             User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    createdById     String
    createdBy         IntegrationV0     @relation(fields: [createdById], references: [id], onDelete: Cascade)

    children          EventV0[]
}

model IntegrationV0 {
    id                String  @id @default(cuid())
    userId            String
    token             String  @unique @default(uuid())
    
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    sessionsV0        SessionV0[]
    eventsV0          EventV0[]
    subEventsV0       SubEventV0[]
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String    @id @default(cuid())
    name                String?
    email               String?   @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]

    integrationsV0      IntegrationV0[]
    sessionsV0          SessionV0[]
    eventsV0            EventV0[]
    subEventsV0         SubEventV0[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
